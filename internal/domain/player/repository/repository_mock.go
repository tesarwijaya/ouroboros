// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/player/repository/repository.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/tesarwijaya/ouroboros/internal/domain/player/model"
)

// MockPlayerRepository is a mock of PlayerRepository interface.
type MockPlayerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerRepositoryMockRecorder
}

// MockPlayerRepositoryMockRecorder is the mock recorder for MockPlayerRepository.
type MockPlayerRepositoryMockRecorder struct {
	mock *MockPlayerRepository
}

// NewMockPlayerRepository creates a new mock instance.
func NewMockPlayerRepository(ctrl *gomock.Controller) *MockPlayerRepository {
	mock := &MockPlayerRepository{ctrl: ctrl}
	mock.recorder = &MockPlayerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayerRepository) EXPECT() *MockPlayerRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockPlayerRepository) FindAll(ctx context.Context) ([]model.PlayerModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]model.PlayerModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockPlayerRepositoryMockRecorder) FindAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockPlayerRepository)(nil).FindAll), ctx)
}

// FindByID mocks base method.
func (m *MockPlayerRepository) FindByID(ctx context.Context, id int64) (model.PlayerModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(model.PlayerModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockPlayerRepositoryMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockPlayerRepository)(nil).FindByID), ctx, id)
}

// FindByTeamID mocks base method.
func (m *MockPlayerRepository) FindByTeamID(ctx context.Context, teamID int64) ([]model.PlayerModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTeamID", ctx, teamID)
	ret0, _ := ret[0].([]model.PlayerModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTeamID indicates an expected call of FindByTeamID.
func (mr *MockPlayerRepositoryMockRecorder) FindByTeamID(ctx, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTeamID", reflect.TypeOf((*MockPlayerRepository)(nil).FindByTeamID), ctx, teamID)
}

// Insert mocks base method.
func (m *MockPlayerRepository) Insert(ctx context.Context, payload model.PlayerModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockPlayerRepositoryMockRecorder) Insert(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockPlayerRepository)(nil).Insert), ctx, payload)
}
