// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/player/service/service.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/tesarwijaya/ouroboros/internal/domain/player/model"
)

// MockPlayerService is a mock of PlayerService interface.
type MockPlayerService struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerServiceMockRecorder
}

// MockPlayerServiceMockRecorder is the mock recorder for MockPlayerService.
type MockPlayerServiceMockRecorder struct {
	mock *MockPlayerService
}

// NewMockPlayerService creates a new mock instance.
func NewMockPlayerService(ctrl *gomock.Controller) *MockPlayerService {
	mock := &MockPlayerService{ctrl: ctrl}
	mock.recorder = &MockPlayerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayerService) EXPECT() *MockPlayerServiceMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockPlayerService) FindAll(ctx context.Context) ([]model.PlayerModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]model.PlayerModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockPlayerServiceMockRecorder) FindAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockPlayerService)(nil).FindAll), ctx)
}

// FindByID mocks base method.
func (m *MockPlayerService) FindByID(ctx context.Context, id int64) (model.PlayerModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(model.PlayerModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockPlayerServiceMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockPlayerService)(nil).FindByID), ctx, id)
}

// Insert mocks base method.
func (m *MockPlayerService) Insert(ctx context.Context, payload model.PlayerModel) (model.PlayerModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, payload)
	ret0, _ := ret[0].(model.PlayerModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockPlayerServiceMockRecorder) Insert(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockPlayerService)(nil).Insert), ctx, payload)
}

// Transfer mocks base method.
func (m *MockPlayerService) Transfer(ctx context.Context, payload TransferPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockPlayerServiceMockRecorder) Transfer(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockPlayerService)(nil).Transfer), ctx, payload)
}
